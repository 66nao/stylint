{"name":"Stylint - The Stylus Linter","tagline":"","body":"# stylint - cli stylus linter.\r\n\r\n[patch notes](https://github.com/rossPatton/stylint/blob/master/patch-notes.md)\r\n\r\n[known issues](https://github.com/rossPatton/stylint/issues)\r\n\r\nIf you have any problems with the linter just create a ticket there and I will respond.\r\n\r\nSame thing if you have any feature requests.\r\n\r\nI will gladly accept pull requests if you want to do the work yourself.\r\n\r\nyou can also ping me [here](https://gitter.im/rossPatton/stylint)\r\n\r\n\r\n## CLI\r\n`-h` or `--help`    Display list of commands\r\n\r\n`-w` or `--watch`   Watch file or directory and run lint on change\r\n\r\n`-c` or `--config`  Pass in location of custom config file\r\n\r\n`-s` or `--strict`  Run all tests, regardless of config\r\n\r\n`-v` or `--version` Display current version\r\n\r\n\r\n## Example CLI Usage:\r\n`stylint` Run stylint on cwd\r\n\r\n`stylint path/to/styl -s` Run stylint in strict mode, for masochists\r\n\r\n`stylint path/to/filename.styl` Run stylint on a file\r\n\r\n`stylint path/to/dir -w` Watch dir, run stylint on file change\r\n\r\n`stylint -h` Get list of commands\r\n\r\n`stylint -v` Get version number\r\n\r\n`stylint -c path/to/config/.configrc` Run stylint with custom config settings\r\n\r\n`stylint styl/ -w -c path/to/config/.configrc` Watch dir, use custom config\r\n\r\n\r\n## Gulp\r\nYou can use the raw module with [gulp-shell](https://github.com/sun-zheng-an/gulp-shell) like below:\r\n\r\n```\r\ngulp.task('stylint', shell.task([\r\n    'stylint path/to/styl/ -c .stylintrc'\r\n]));\r\n```\r\n\r\nOr use [gulp-stylint](https://github.com/danielhusar/gulp-stylint)\r\n```\r\nvar gulp = require('gulp');\r\nvar stylint = require('gulp-stylint');\r\n\r\ngulp.task('default', function () {\r\n    return gulp.src('src/*.styl')\r\n        .pipe(stylint())\r\n});\r\n```\r\n\r\n\r\n## Why Write This Tool?\r\nStylus is my CSS pre-processor of choice and the lack of a decent linter (or really, any linter) was an annoying pain point. So I thought I'd try my hand at writing what I thought my ideal linter would look like.\r\n\r\n\r\n## Why Use This Tool?\r\nTo catch little mistakes (duplication of rules for instance) and to enforce a code style guide. This is particularly important with Stylus, which is unopinionated when it comes to syntax. Ideally by 1.0 or earlier this tool will eventually allow you to enforce as little, or as much, syntax as you like.\r\n\r\n\r\n## Options\r\nThe following is a list of the options available to stylint. Use the `-c` or `--config` flag to pass in the location of your custom `.stylintrc` config file if you want to change the defaults. Alternatively, you could pass the `-s` or `--strict` flag to run stylint as though everything was set to true, config file or not.\r\n\r\nThe default settings are pretty weak and unopinionated (I think). If you want to enforce a particular styleguide, you'll have to set up your own config file. Below is the default config.\r\n\r\n```\r\n{\r\n    \"borderNone\": true,\r\n    \"brackets\": false,\r\n    \"colons\": false,\r\n    \"colors\": false,\r\n    \"commaSpace\": true,\r\n    \"commentSpace\": false,\r\n    \"cssLiteral\": false,\r\n    \"depthLimit\": false,\r\n    \"duplicates\": true,\r\n    \"efficient\": true,\r\n    \"emoji\": false,\r\n    \"enforceBlockStyle\": false,\r\n    \"enforceVarStyle\": false,\r\n    \"extendPref\": false,\r\n    \"globalDupe\": false,\r\n    \"indentSpaces\": 4,\r\n    \"leadingZero\": true,\r\n    \"maxWarnings\": 10,\r\n    \"maxWarningsKill\": false,\r\n    \"mixed\": false,\r\n    \"namingConvention\": false,\r\n    \"namingConventionStrict\": false,\r\n    \"parenSpace\": false,\r\n    \"placeholders\": true,\r\n    \"quotePref\": false,\r\n    \"semicolons\": false,\r\n    \"sortOrder\": false,\r\n    \"stackedProperties\": true,\r\n    \"universal\": true,\r\n    \"valid\": false,\r\n    \"whitespace\": true,\r\n    \"zeroUnits\": true,\r\n    \"zIndexDuplicates\": false,\r\n    \"zIndexNormalize\": false\r\n}\r\n```\r\n\r\n\r\n### warning toggle (inline comment: @stylint off || @stylint on)\r\nDisable linting for a particular block of code by placing `@stylint off` in a line comment. Re-enable by placing `@stylint on` in a line comment further down. Stylint will not test any lines until turned back on. Use this to suppress warnings on a case-by-case basis. By default the linter will check every line except for @css blocks or places where certain rules have exceptions.\r\n\r\nFor example, let's say you want to enforce `namingConvention: \"lowercase_underscore\"`, but you're also styling elements from the Bootstrap framework. You can use the `@stylint off` toggle to prevent warnings in places where you're referencing Bootstrap classes.\r\n\r\nExample:\r\n```stylus\r\n.button_block {\r\n    background: silver;\r\n    padding: 4px;\r\n}\r\n// @stylint off\r\n.button_block .btn-default {\r\n    background-color: green;\r\n    color: white;\r\n}\r\n// @stylint on\r\n```\r\n\r\n\r\n### borderNone (default: true, boolean)\r\nCheck for places where `border 0` could be used instead of border none.\r\n\r\nExample if true: prefer `border 0` over `border none`\r\n\r\n\r\n### brackets (default: false, boolean)\r\nBrackets are optional in stylus (except in hashes). If set to true, throws a warning if a bracket is used outside of a hash.\r\n\r\nExample if true: prefer `.some-class-name ` over `.some-class-name {`\r\n\r\n\r\n### colons (default: false, boolean)\r\nChecks for existence of unecessary colons. Does not throw a warning if colon is used inside a hash.\r\n\r\nExample if true: prefer `margin 0` over `margin: 0`\r\n\r\n\r\n### colors (default: false, boolean)\r\nChecks for hexidecimal color values, and suggest using a variable instead.\r\n\r\nExample if true: prefer `color $red` over `color #f00`\r\n\r\n\r\n### commaSpace (default: true, boolean)\r\nEnforce spaces after commas.\r\n\r\nExample if true: prefer `rgba(0, 0, 0, .18)` over `rgba(0,0,0,.18)`\r\n\r\n\r\n### commentSpace (default: false, boolean)\r\nEnforce spaces after line comments.\r\n\r\nExample if true: prefer `// comment` over `//comment`\r\n\r\n\r\n### cssLiteral (default: false, boolean)\r\nBy default Stylint ignores `@css` blocks. If set to true however, it will throw a warning if `@css` is used.\r\n\r\nExample if true: `@css` will throw a warning\r\n\r\n\r\n### depthLimit (default: false, number or false)\r\nSet the max selector depth. If set to 4, max selector depth will be 4 indents. Pseudo selectors like `&:first-child` or `&:hover` won't count towards the limit.\r\n\r\nSet to false if you don't want to check for this.\r\n\r\n\r\n### duplicates (default: true, boolean)\r\nChecks if selector or property duplicated unnecessarily. By default, only checks on a file-by-file basis, but if `globalDupes: true` is set, then it will also check for duplicates globally (for root values only).\r\n\r\nExample if true: the following will throw a warning:\r\n```\r\n.test\r\n    margin 0\r\n    margin 5px\r\n```\r\n\r\n\r\n### efficient (default: true, boolean)\r\nCheck for places where properties can be written more efficiently.\r\n\r\nExample if true: prefer `margin 0` over `margin 0 0`\r\n\r\n\r\n### emoji (default: false, boolean)\r\nDo you want a happy face with your sucess/warning messages? of course you do\r\n\r\n\r\n### enforceBlockStyle (default: false, boolean)\r\nEnforce use of `@block` when defining a block variable.\r\n\r\nExample: prefer `myBlock = @block` over `myBlock =`\r\n\r\n\r\n### enforceVarStyle (default: false, boolean)\r\nEnforce use of `$` when defining a variable. In Stylus using a `$` when defining a variable is optional, but is a good idea if you want to prevent ambiguity. Not including the `$` sets up situations where you wonder: \"Is this a variable or a value?\" For instance: `padding $default` is easier to understand than `padding default`.\r\n\r\nYes, `default` isn't an acceptable value for `padding`, but at first glance you might not catch that. And now if you try to set `cursor default`, it's not going to behave the way you expect. All this pain and heartache could've been avoided if you just used a `$`.\r\n\r\nExample: prefer `$my-var = 0` over `my-var = 0`\r\n\r\n\r\n### extendPref (default: false, string or false)\r\nPass in either `@extend` or `@extends` and then enforce that. Both are valid in Stylus. It doesn't really matter which one you use. I prefer `@extends` myself.\r\n\r\nExample if set to `@extends`: prefer `@extends $some-var` over `@extend $some-var`\r\n\r\nExample if set to `@extend`: prefer `@extend $some-var` over `@extend $some-var`\r\n\r\n\r\n### globalDupe (default: false, boolean)\r\nWorks in conjunction with duplicates. Does nothing on its own. If false, duplicates will check for dupes within individual files only. If true, duplicates will check for dupes across all files.\r\n\r\nExample if true: the following will throw a warning\r\n```\r\n>>> file1.styl\r\n.test\r\n    margin 0\r\n\r\n>>> file2.styl\r\n.test\r\n    margin 5px\r\n```\r\n\r\n\r\n### indentSpaces (default: 4, number or false)\r\nThis works in conjunction with depthLimit. If you indent with spaces this is the number of spaces you indent with. If you use hard tabs, set this value to false.\r\n\r\nBy default this value is 4, so if you indent with hard tabs or 2 spaces you'll need to manually set this value in a custom `.stylintrc` file. With default settings, this means the depth limit is 4 indents of 4 spaces each.\r\n\r\n\r\n### leadingZero (default: true, boolean)\r\nChecking for unnecessary leading zeroes on decimal points. You don't need them.\r\n\r\nExample: prefer `rgba( 0, 0, 0, .5 )` over `rgba( 0, 0, 0, 0.5 )`\r\n\r\n\r\n### maxWarnings (default: 10, number)\r\nSet 'max' number of warnings. Currently this just displays a slightly sterner message. Womp womp.\r\n\r\n\r\n### maxWarningsKill (default: false, boolean)\r\nIf set to true, then Stylint will throw an error if total # of warnings goes over the limit set in maxWarnings.\r\n\r\n\r\n### mixed (default: false, boolean, relies on indentPref)\r\nReturns true if mixed spaces and tabs are found. If a number is passed to indentPref (4 is the default), it assumes soft tabs (ie, spaces), and if false is passed to indentPref it assumes hard tabs.\r\n\r\nIf soft tabs, throws warning if hard tabs used. If hard tabs, throws warning if unnecessary extra spaces found.\r\n\r\nExample if indentPref: 4 and mixed: true: prefer `\\s\\s\\s\\smargin\\s0` over `\\tmargin\\s0`\r\n\r\nExample if indentPref: 2 and mixed: true: prefer `\\s\\smargin\\s0` over `\\tmargin\\s0`\r\n\r\nExample if indentPref: false and mixed: true: prefer `\\tmargin\\s0` over `\\s\\s\\s\\smargin\\s0`\r\n\r\n\r\n### namingConvention (default: false, false | 'lowercase-dash' | 'lowercase_underscore' | 'camelCase' | 'BEM')\r\nEnforce a particular naming convention when declaring classes, ids, and variables. Throws a warning if you don't follow the convention. If set to false, allow any convention.\r\n\r\nExample if set to `'lowercase-dash'`: prefer `$var-name` over `$var_name` or `$varName`\r\n\r\nExample if set to `'lowercase_underscore'`: prefer `$var_name` over `$var-name` or `$varName`\r\n\r\nExample if set to `'camelCase'`: prefer `$varName` over `$var_name` or `$var-name`\r\n\r\nExample if set to `'BEM'`: prefer `$var__like--this` over `$var_name` or `$varName`\r\n\r\n\r\n### namingConventionStrict (default: false, boolean)\r\nBy default, namingConvention only looks at variable names. If namingConventionStrict is set to true, namingConvention will also look at class and id names.\r\n\r\nThis is useful if you have little or no 3rd party css in your codebase.\r\n\r\n\r\n### parenSpace (default: false, boolean)\r\nEnforce use of extra spaces inside parens.\r\n\r\nThis option used to be called mixinSpace, and you can still call it that if you want, but I will remove the old option by 1.0 probably.\r\n\r\nExample: prefer `my-mixin( $myParam )` over `my-mixin($myParam)`\r\n\r\n\r\n### placeholder (default: false, boolean)\r\nEnforce extending placeholder vars when using `@extend(s)`\r\n\r\nExample: prefer `@extends $placeholder` over `$extends .some-class`\r\n\r\n\r\n### quotePref (default: false, false | 'single' | 'double')\r\nEnforce consistent quotation style.\r\n\r\nExample if `'single'`: prefer `$var = 'some string'` over `$var = \"some string\"`\r\nExample if `'double'`: prefer `$var = \"some string\"` over `$var = 'some string'`\r\n\r\n\r\n### stackedProperties (default: true, boolean)\r\nNo one-liners. Enforce putting properties on new lines.\r\n\r\nExample if `true`: prefer\r\n\r\n```\r\n.className\r\n    padding 0\r\n```\r\n\r\nover\r\n\r\n`.className { padding 0 }`\r\n\r\n\r\n### semicolons (default: false, boolean)\r\nLook for unecessary semicolons.\r\n\r\nExample: prefer `margin 0` over `margin 0;`\r\n\r\n\r\n### sortOrder (default: false, false | 'alphabetical' | 'grouped' | {Array})\r\nEnforce a particular sort order when declaring properties. Throws a warning if you don't follow the order. If set to false, allow any order.\r\n\r\nExample if `'alphabetical'`:\r\n\r\nprefer this:\r\n```\r\n.some-class\r\n    display block\r\n    float left\r\n    position absolute\r\n    right 10px\r\n    top 0\r\n```\r\n\r\nover this:\r\n```\r\n.some-class\r\n    position absolute\r\n    top 0\r\n    right 10px\r\n    display block\r\n    float left\r\n```\r\n\r\nExample if `'grouped'` ([based on predefined grouped ordering](src/data/ordering.json#L2)):\r\n\r\nprefer this:\r\n```\r\n.some-class\r\n    position absolute\r\n    top 0\r\n    right 10px\r\n    display block\r\n    float left\r\n```\r\n\r\nover this:\r\n```\r\n.some-class\r\n    display block\r\n    float left\r\n    position absolute\r\n    right 10px\r\n    top 0\r\n```\r\n\r\nExample if `[ 'margin', 'padding', 'float', 'position' ]`:\r\n\r\nprefer this:\r\n```\r\n.some-class\r\n    margin 0\r\n    padding 0\r\n    float left\r\n    position absolute\r\n    right 10px\r\n    top 0\r\n    display block\r\n```\r\n\r\nover this:\r\n```\r\n.some-class\r\n    display block\r\n    float left\r\n    position absolute\r\n    right 10px\r\n    top 0\r\n    margin 0\r\n    padding 0\r\n```\r\n\r\nWhen set to `'grouped'` or `{Array}` throws a warning if properties that are not defined in the ordering array are not after those that should be ordered.\r\n\r\n\r\n### universal (default: true, boolean)\r\nLooks for instances of the inefficient * selector. Lots of resets use this, for good reason (resetting box model), but past that you really don't need this selector, and you should avoid it if possible.\r\n\r\n\r\n### valid (default: false, boolean)\r\nCheck that a property is a valid CSS or HTML property. Currently just checks properties, value checks will come soon.\r\n\r\nExample if true: `marg 0` will throw a warning, prefer `margin 0`\r\n\r\n\r\n### whitespace (default: true, boolean)\r\nLooks for trailing whitespace. Throws a warning if any found.\r\n\r\n\r\n### zeroUnits (default: true, boolean)\r\nLooks for instances of `0px`. You don't need the px. Checks all units, not just px.\r\n\r\nExample: prefer `margin-right 0` over `margin-right 0em`\r\n\r\n\r\n### zIndexDuplicates (default: false, boolean)\r\nIf a z-index value has been used before, throw a warning. Is this useful? WHO KNOWS.\r\n\r\nExample if true: the follow throws a warning\r\n```\r\n.test\r\n    z-index 5\r\n\r\n.test\r\n    z-index 5\r\n```\r\n\r\nDoesn't take into considering stacking contexts yet so, and i'm not sure it ever will, so good luck if you try to use this. Small projects might get some use out of this.\r\n\r\n\r\n### zIndexNormalize (default: false, number or false)\r\nEnforce some (very) basic z-index sanity. Any number passed in will be used as the base for your z-index values. Throws an error if your value is not normalized.\r\n\r\nExample if set to 5: prefer `z-index 10` over `z-index 9`\r\nExample if set to 10: prefer `z-index 20` over `z-index 15`\r\nExample if set to 50: prefer `z-index 100` over `z-index 75`\r\n\r\nDoesn't take into considering stacking contexts yet so, and i'm not sure it ever will, so good luck if you try to use this. Small projects might get some use out of this.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}